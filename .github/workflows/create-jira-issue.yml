name: Create Jira Issue

on:
  workflow_call:
    inputs:
      project:
        description: The key of the Jira project to create the issue in
        required: true
        type: string
      github_team:
        description: The name of the GitHub Org team to assign the issue to
        required: true
        type: string
      issue_type:
        description: The type of issue to create
        required: false
        default: Task
        type: string
      labels:
        description: Comma-separated list of labels to apply to the issue
        required: false
        default: security, dependabot
        type: string
    secrets:
      JIRA_BASE_URL:
        required: true
      JIRA_USER_EMAIL:
        required: true
      JIRA_API_TOKEN:
        required: true
      READ_ONLY_ORG_TEAM_MEMBERS:
        required: true

jobs:
  create_jira_issue_for_dependabot_pr:
    runs-on: ubuntu-latest
    steps:
      - name: Skip # Run this rather than just skipping the whole job, so that we see a green tick in the PR checks
        if: >- # Specificity is important here to avoid triggering this action multiple times when Dependabot creates then labels a PR
          !(github.actor == 'dependabot[bot]' && github.event_name == 'pull_request' && github.event.action == 'opened') ||
          !(github.actor != 'dependabot[bot]' && github.event_name == 'pull_request' && github.event.action == 'labeled' && github.event.label.name == 'process-existing-pr')
        run: echo "Job skipped"

      - name: Checkout code
        if: >- # Specificity is important here to avoid triggering this action multiple times when Dependabot creates then labels a PR
          (github.actor == 'dependabot[bot]' && github.event_name == 'pull_request' && github.event.action == 'opened') ||
          (github.actor != 'dependabot[bot]' && github.event_name == 'pull_request' && github.event.action == 'labeled' && github.event.label.name == 'process-existing-pr')
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0 # Fetch all history so that we can get the release branch names

      - name: Get release branch names
        if: >- # Specificity is important here to avoid triggering this action multiple times when Dependabot creates then labels a PR
          (github.actor == 'dependabot[bot]' && github.event_name == 'pull_request' && github.event.action == 'opened') ||
          (github.actor != 'dependabot[bot]' && github.event_name == 'pull_request' && github.event.action == 'labeled' && github.event.label.name == 'process-existing-pr')
        id: get_release_branch_names
        run: |
          all_branches=$(git branch -r --format='%(refname:short)')
          release_branches=$(echo "$all_branches" | grep -E 'release/.*0$' | tr '\n' ',' | sed 's/,$//')
          echo "release_branches=$release_branches" >> $GITHUB_OUTPUT

      - name: Log release branch names
        run: echo "Release branch names ${{ steps.get_release_branch_names.outputs.release_branches }}"

      - name: Assign PR to GH team member # Assign PR to a random member of the specified GitHub Org team
        if: >- # Specificity is important here to avoid triggering this action multiple times when Dependabot creates then labels a PR
          (github.actor == 'dependabot[bot]' && github.event_name == 'pull_request' && github.event.action == 'opened') ||
          (github.actor != 'dependabot[bot]' && github.event_name == 'pull_request' && github.event.action == 'labeled' && github.event.label.name == 'process-existing-pr')
        uses: dc-ag/auto-assign-assignees-from-team@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          read-token: ${{ secrets.READ_ONLY_ORG_TEAM_MEMBERS }} # Read only token which needs access to fetch team members
          team: ${{ inputs.github_team }}
          amount: 1 # Amount of assignees to assign

      - name: Get PR assignee # To be used to assign Jira issue to the same person
        if: >- # Specificity is important here to avoid triggering this action multiple times when Dependabot creates then labels a PR
          (github.actor == 'dependabot[bot]' && github.event_name == 'pull_request' && github.event.action == 'opened') ||
          (github.actor != 'dependabot[bot]' && github.event_name == 'pull_request' && github.event.action == 'labeled' && github.event.label.name == 'process-existing-pr')
        id: get_assignee
        run: |
          assignee_object=$(gh pr view ${{ github.event.pull_request.number }} --json assignees --jq '.assignees[0]')
          assignee_username=$(echo "$assignee_object" | jq -r '.login')
          echo "assignee=$assignee_username" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Jira
        if: >- # Specificity is important here to avoid triggering this action multiple times when Dependabot creates then labels a PR
          (github.actor == 'dependabot[bot]' && github.event_name == 'pull_request' && github.event.action == 'opened') ||
          (github.actor != 'dependabot[bot]' && github.event_name == 'pull_request' && github.event.action == 'labeled' && github.event.label.name == 'process-existing-pr')
        uses: atlassian/gajira-login@v3
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

      - name: Create Jira issue
        if: >- # Specificity is important here to avoid triggering this action multiple times when Dependabot creates then labels a PR
          (github.actor == 'dependabot[bot]' && github.event_name == 'pull_request' && github.event.action == 'opened') ||
          (github.actor != 'dependabot[bot]' && github.event_name == 'pull_request' && github.event.action == 'labeled' && github.event.label.name == 'process-existing-pr')
        id: create
        uses: doctor-power/gajira-create@v1.0.0
        with:
          project: ${{ inputs.project }}
          issuetype: ${{ inputs.issue_type }}
          isSec: true
          summary: ${{ github.event.pull_request.title }}
          body: ${{ github.event.pull_request.body }}
          prlink: ${{ github.event.pull_request._links.html.href }}
          labels: ${{ inputs.labels }}
          assignee: ${{ steps.get_assignee.outputs.assignee }}
          releaseBranches: ${{ steps.get_release_branch_names.outputs.release_branches }}
          githubJiraUserMap: ${{ vars.GH_JIRA_USER_MAP }}

      - name: Transition Jira issue to In Review
        uses: atlassian/gajira-transition@v3
        with:
          issue: ${{ steps.create.outputs.issue }}
          transition: Done

      - name: Log created issue
        if: >- # Specificity is important here to avoid triggering this action multiple times when Dependabot creates then labels a PR
          (github.actor == 'dependabot[bot]' && github.event_name == 'pull_request' && github.event.action == 'opened') ||
          (github.actor != 'dependabot[bot]' && github.event_name == 'pull_request' && github.event.action == 'labeled' && github.event.label.name == 'process-existing-pr')
        run: echo "Issue ${{ steps.create.outputs.issue }} was created"

      - name: Rename pull request to include Jira issue number
        if: >- # Specificity is important here to avoid triggering this action multiple times when Dependabot creates then labels a PR
          (github.actor == 'dependabot[bot]' && github.event_name == 'pull_request' && github.event.action == 'opened') ||
          (github.actor != 'dependabot[bot]' && github.event_name == 'pull_request' && github.event.action == 'labeled' && github.event.label.name == 'process-existing-pr')
        run: |
          gh pr edit ${{ github.event.pull_request.number }} \
            --title "${{ steps.create.outputs.issue }}: ${{ github.event.pull_request.title }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add Jira issue link as comment on PR
        if: >- # Specificity is important here to avoid triggering this action multiple times when Dependabot creates then labels a PR
          (github.actor == 'dependabot[bot]' && github.event_name == 'pull_request' && github.event.action == 'opened') ||
          (github.actor != 'dependabot[bot]' && github.event_name == 'pull_request' && github.event.action == 'labeled' && github.event.label.name == 'process-existing-pr')
        run: |
          gh pr comment ${{ github.event.pull_request.number }} \
            --body "Associated Jira issue: https://doctor-power.atlassian.net/browse/${{ steps.create.outputs.issue }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
